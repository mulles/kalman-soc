#This Script 
  # 1.gets the measurement data from influxdb, struct it and write to /data/raw_sensor_data.csv
  # 2.Executes ./backtest
  # 3.Reads the calculated SOC from the /data/processed_sensor_data.csv
  # 4.Writes it into the influxdb on the correct place. 
  
#requirements: python3 -m pip install influxdb

import subprocess


subprocess.run(["./backtest"])
influx_org = 'LibreSolar'
influx_bucket = 'LabjackCurrentVoltage'
influx_token = '6O3aUzQNynIPhh1jwlNukYU1gx5Z2fJZNehpANlNl1rTtLsSW2Acm2rFE3mO81l2Fq_Nl8lyhqajg5ivOAzrvA=='
influx_url = f'https://influxdb.lsserver.uber.space/api/v2/write?org={influx_org}&bucket={influx_bucket}&precision=s'
data = ""
headers = {'Authorization': 'Token %s' % influx_token}


curl -G https://influxdb.lsserver.uber.space/query \
  -u todd:influxdb4ever \
  --data-urlencode "q=SHOW DATABASES"


curl -G 'https://influxdb.lsserver.uber.space/query?pretty=true'  
--header "Authorization: Token 6O3aUzQNynIPhh1jwlNukYU1gx5Z2fJZNehpANlNl1rTtLsSW2Acm2rFE3mO81l2Fq_Nl8lyhqajg5ivOAzrvA==" 
--data-urlencode "q=from(bucket: "LabjackCurrentVoltage") 
  |> range(start: v.timeRangeStart, stop: v.timeRangeStop) \
  |> filter(fn: (r) => r["_measurement"] == "V" or r["_measurement"] == "A" or r["_measurement"] == "Info") \
  |> filter(fn: (r) => r["_field"] == "Bat_V" or r["_field"] == "Bat_A" or r["_field"] == "ChgState" or r["_field"] == "SOC_pct") \
  |> filter(fn: (r) => r["device"] == "mppt-1210-hus") \
  |> aggregateWindow(every: v.windowPeriod, fn: mean, createEmpty: false)\
  |> yield(name: "mean")"\
  
   r = requests.post(influx_url, headers=headers, data=data)
  
curl -G "https://influxdb.lsserver.uber.space/query?db=LabjackCurrentVoltage" \



curl -G "https://influxdb.lsserver.uber.space/query?db=LabjackCurrentVoltage" \
--data-urlencode "q=SHOW DATABASES" \ 
--header "'Authorization': 'Token 6O3aUzQNynIPhh1jwlNukYU1gx5Z2fJZNehpANlNl1rTtLsSW2Acm2rFE3mO81l2Fq_Nl8lyhqajg5ivOAzrvA=='"  \
